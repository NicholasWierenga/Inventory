{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let UserService = /*#__PURE__*/(() => {\n  class UserService {\n    constructor(http, baseUrl) {\n      this.http = http;\n      this.email = \"\";\n      this.badLogin = false;\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8'); // We don't need headers or requestOption, but it makes console less bad.\n\n      this.requestOptions = {\n        headers: this.headers\n      };\n      this.urlRoot = baseUrl;\n    }\n\n    getAllUsers() {\n      return this.http.get(this.urlRoot + \"user/showAllUsers\");\n    }\n\n    createUser(newUser) {\n      return this.http.post(this.urlRoot + \"user/createUser\", newUser, this.requestOptions);\n    }\n\n    newestUser() {\n      return this.http.get(this.urlRoot + \"user/newestUser\");\n    }\n\n    getUsers() {\n      if (this.allUsers === undefined) {\n        // This is to avoid calling all users everytime the user decides to switch the page, which is taxing.\n        //                                    This should never cause an issue as when we add/update an user, we always add/update in allUsers accordingly.\n        this.getAllUsers().subscribe(Users => this.allUsers = Users);\n      }\n    }\n\n    login(email) {\n      this.badLogin = false;\n\n      if (this.allUsers.find(user => user.email.toLowerCase() === email.toLowerCase()) !== undefined) {\n        this.loggedInUser = this.allUsers.find(user => user.email.toLowerCase() === email.toLowerCase()); // This is weird since it has to search through all users twice, so we should rework it\n      } else {\n        this.badLogin = true;\n      }\n    }\n\n    testLogin() {\n      this.badLogin = false;\n      this.loggedInUser = this.allUsers[0];\n    }\n\n    logout() {\n      let noUser;\n      this.loggedInUser = noUser; // This is to set loggedInUser back to being undefined.\n\n      this.email = \"\";\n    }\n\n  }\n\n  UserService.ɵfac = function UserService_Factory(t) {\n    return new (t || UserService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'));\n  };\n\n  UserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: UserService,\n    factory: UserService.ɵfac,\n    providedIn: 'root'\n  });\n  return UserService;\n})();","map":null,"metadata":{},"sourceType":"module"}