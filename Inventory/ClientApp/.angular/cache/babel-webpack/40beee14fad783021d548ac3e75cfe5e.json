{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./location.service\";\nexport let ProductService = /*#__PURE__*/(() => {\n  class ProductService {\n    constructor(http, baseUrl, locationService) {\n      this.http = http;\n      this.locationService = locationService;\n      this.productInvArray = [];\n      this.newProductInvArray = [];\n      this.headers = new HttpHeaders().set('Content-Type', 'application/json; charset=utf-8'); // We don't need headers or requestOption, but it makes console less bad.\n\n      this.requestOptions = {\n        headers: this.headers\n      };\n      this.urlRoot = baseUrl;\n    }\n\n    searchProducts(term, locationId, productId, brand) {\n      let endpoint = \"product/SearchProducts/\";\n      this.getProductInv();\n\n      if (term != \"\") {\n        endpoint += `&${term}`;\n      } else {\n        endpoint += \"&emptyString\"; // We can't pass null to the url, so we use some unlikely name for any product, like emptyString\n      }\n\n      if (locationId != \"\") {\n        endpoint += `&${locationId}`;\n      } else {\n        endpoint += \"&emptyString\";\n      }\n\n      if (productId != \"\") {\n        endpoint += `&${productId}`;\n      } else {\n        endpoint += \"&emptyString\";\n      }\n\n      if (brand != \"\") {\n        endpoint += `&${brand}`;\n      } else {\n        endpoint += \"&emptyString\";\n      }\n\n      return this.http.get(this.urlRoot + endpoint);\n    }\n\n    updateProductInv(id, productToUpdate) {\n      return this.http.post(this.urlRoot + \"product/updateProduct/\" + id, productToUpdate, this.requestOptions);\n    }\n\n    getProductInv() {\n      this.http.get(this.urlRoot + \"product/showAllProducts\", this.requestOptions).subscribe(response => {\n        this.productInvArray = response;\n      });\n    }\n\n    mergeProductProductInv() {\n      this.fullList.data.map(data => {\n        data.items.map(item => {\n          if (this.productInvArray.find(inventory => item.itemId === inventory.itemId && inventory.locationID == this.locationService.location.data.locationId)) {\n            // Checks if we already have productInv with the correct itemId and locationId in the db.\n            item.inventory = this.productInvArray.find(inventory => item.itemId === inventory.itemId && this.locationService.location.data.locationId === inventory.locationID);\n          } else {\n            // if the productInv doesn't exist, we create a new one with some random dummy data to work with.\n            let newProductInv = {\n              id: undefined,\n              productName: data.description,\n              itemId: item.itemId,\n              onHand: Math.floor(Math.random() * 250),\n              sales: Math.floor(Math.random() * 35),\n              locationID: this.locationService.location.data.locationId\n            };\n            this.newProductInvArray.push(newProductInv);\n            item.inventory = newProductInv;\n          }\n        });\n      });\n      this.searchedList = this.fullList;\n\n      if (this.newProductInvArray.length > 0) {\n        for (let i = 0; i < this.newProductInvArray.length; i++) {\n          this.createProductInv(this.newProductInvArray[i]).subscribe(() => {\n            if (i + 1 === this.newProductInvArray.length) {\n              this.getProductInv();\n            }\n\n            ;\n          });\n        }\n      }\n    }\n\n    createProductInv(newProductInvs) {\n      return this.http.post(this.urlRoot + \"product/createProductInvs\", newProductInvs, this.requestOptions);\n    }\n\n  }\n\n  ProductService.ɵfac = function ProductService_Factory(t) {\n    return new (t || ProductService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject('BASE_URL'), i0.ɵɵinject(i2.LocationService));\n  };\n\n  ProductService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ProductService,\n    factory: ProductService.ɵfac,\n    providedIn: 'root'\n  });\n  return ProductService;\n})();","map":null,"metadata":{},"sourceType":"module"}